{"InvoiceTDS": {"Extract": {"mobile_ats_eod": {"SharepointRead": {"path": "factory.extract", "parameters": {"load_method": "pd.read_excel({file})", "path_id": "B94B28A0-1542-4BDE-B8B5-ACFFCB3612EA", "folder_or_file": "file"}}}, "optimum_ats_eod": {"SharepointRead": {"path": "factory.extract", "parameters": {"load_method": "pd.read_csv({file})", "path_id": "22291f8b-8273-423a-86be-78a262366d1a", "folder_or_file": "folder"}}}, "rates": {"MicrosoftSQLRead": {"path": "factory.extract", "parameters": {"schema": "finance", "table": "glb_business_unit_billable_rates", "where": "WHERE business_unit LIKE '%Altice MBJ%'"}}}, "mobile_ats": {"MicrosoftSQLRead": {"path": "factory.extract", "parameters": {"schema": "altice", "table": "glb_mobile_ats", "where": "WHERE date >= '2023-01-01'"}}}, "suddenlink_ats": {"MicrosoftSQLRead": {"path": "factory.extract", "parameters": {"schema": "altice", "table": "glb_suddenlink_ats", "where": "WHERE date >= '2023-01-01'"}}}, "optimum_ats": {"MicrosoftSQLRead": {"path": "factory.extract", "parameters": {"schema": "altice", "table": "glb_optimum_ats", "where": "WHERE date >= '2023-01-01'"}}}, "mobile_nrrc": {"MicrosoftSQLRead": {"path": "factory.extract", "parameters": {"schema": "altice", "table": "glb_mobile_nrrc", "where": "WHERE date >= '2023-01-01'"}}}, "suddenlink_nrrc": {"MicrosoftSQLRead": {"path": "factory.extract", "parameters": {"schema": "altice", "table": "glb_suddenlink_nrrc", "where": "WHERE date >= '2023-01-01'"}}}, "optimum_nrrc": {"MicrosoftSQLRead": {"path": "factory.extract", "parameters": {"schema": "altice", "table": "glb_optimum_nrrc", "where": "WHERE date >= '2023-01-01'"}}}, "system_issues": {"MicrosoftSQLRead": {"path": "factory.extract", "parameters": {"schema": "altice", "table": "billable_system_issues_hours", "where": "WHERE date >= '2023-01-01'"}}}, "date_dimension": {"MicrosoftSQLRead": {"path": "factory.extract", "parameters": {"schema": "misc", "table": "date_dimension", "where": "WHERE db_date >= '2023-01-01'"}}}, "billable_lines_business": {"MicrosoftSQLRead": {"path": "factory.extract", "parameters": {"schema": "altice", "table": "glb_billable_lines_business", "where": "WHERE month_starting >= '2023-01-01'"}}}, "committed_hours": {"MicrosoftSQLRead": {"path": "factory.extract", "parameters": {"schema": "altice", "table": "glb_committed_hours", "where": "WHERE half_hour_interval >= '2023-01-01'"}}}, "approved_overages": {"MicrosoftSQLRead": {"path": "factory.extract", "parameters": {"schema": "altice", "table": "glb_approved_overages", "where": "WHERE half_hour_interval >= '2023-01-01'"}}}}, "Transform": {"rates": {"OrderDataframeColumns": {"path": "factory.transform.Dataframe", "parameters": {"columns": ["business_unit", "rate_code_lob", "rate", "start_date", "end_date"]}}, "ExplodeDates": {"path": "factory.transform.Dates", "parameters": {"start_column": "start_date", "end_column": "end_date", "new_column": "date"}}}, "approved_overages": {"ValidateTextColumns": {"path": "factory.transform.Validations", "parameters": {"columns": ["line_business"]}}}, "mobile_ats": {"ValidateTextColumns": {"path": "factory.transform.Validations", "parameters": {"columns": ["agent_name"]}}, "ValidateFloatColumns": {"path": "factory.transform.Validations", "parameters": {"columns": ["ready_sec", "not_ready_sec", "ats"], "errors": "coerce"}}}, "optimum_ats": {"ValidateTextColumns": {"path": "factory.transform.Validations", "parameters": {"columns": ["agent_name"]}}, "ValidateFloatColumns": {"path": "factory.transform.Validations", "parameters": {"columns": ["ready_sec", "not_ready_sec", "ats"], "errors": "coerce"}}}, "suddenlink_ats": {"ValidateTextColumns": {"path": "factory.transform.Validations", "parameters": {"columns": ["agent_name"]}}, "ValidateFloatColumns": {"path": "factory.transform.Validations", "parameters": {"columns": ["ready_sec", "not_ready_sec", "ats"], "errors": "coerce"}}}, "billable_hours_mobile": {"ApplyQuery": {"path": "factory.transform.Queries", "parameters": {"query": "\n                            WITH loc_ats as (\n                              SELECT A.date, B.lob, A.location, sum(A.ats_hours) as ats_hours\n                              FROM (\n                                SELECT gsa.date, gsa.half_hour_interval, gsa.organization, gsa.location, gsa.department, gsa.skill, gsa.language,\n                                  ((gsa.occupancy_pct/100.0) * (gsa.active_sec - gsa.not_ready_sec)) as occupied_sec,\n                                  gsa.ats as ats_hours,\n                                  (gsa.active_sec - gsa.not_ready_sec) as productive_sec,\n                                  dd.month_starting\n                                FROM mobile_ats gsa\n                                LEFT JOIN date_dimension dd ON dd.db_date = gsa.date) AS A\n                                JOIN billable_lines_business B\n                                ON (A.month_starting = B.month_starting\n                                  AND A.organization = B.organization\n                                  AND A.location = B.location\n                                  AND A.department = B.department\n                                  AND A.skill = B.skill\n                                  AND A.language = B.language)\n                              GROUP BY A.date, B.lob, A.location\n                            ), ats_date as (\n                              SELECT gsa.date, gsa.half_hour_interval, gsa.organization, gsa.location, gsa.department, gsa.skill, gsa.language,\n                                ((gsa.occupancy_pct/100.0) * (gsa.active_sec - gsa.not_ready_sec)) as occupied_sec,\n                                 gsa.ats as ats_hours,\n                                 (gsa.active_sec - gsa.not_ready_sec) as productive_sec,\n                                 dd.month_starting\n                              FROM mobile_ats gsa\n                              LEFT JOIN date_dimension dd ON dd.db_date = gsa.date\n                            ), ats_lob as (\n                              SELECT ad.date, ad.month_starting, ad.half_hour_interval, ad.organization, ad.location, ad.department, ad.skill, ad.language,\n                                ad.occupied_sec, ad.ats_hours, ad.productive_sec, lb.lob\n                              FROM ats_date ad\n                              JOIN billable_lines_business lb\n                              ON (ad.month_starting = lb.month_starting\n                                AND ad.organization = lb.organization\n                                AND ad.location = lb.location\n                                AND ad.department = lb.department\n                                AND ad.skill = lb.skill\n                                AND ad.language = lb.language)\n                            ), temp_grouped_ats as (\n                              SELECT A.half_hour_interval, A.month_starting, A.lob,\n                                COALESCE(SUM(occupied_sec) / NULLIF(SUM(productive_sec),0), 0) as occupancy,\n                                SUM(A.ats_hours) as ats_hours\n                              FROM ats_lob AS A\n                              GROUP BY A.half_hour_interval, A.month_starting, A.lob\n                            ), ats_commits as (\n                              SELECT A.half_hour_interval, A.lob, A.occupancy, A.ats_hours, B.committed_hours\n                              FROM temp_grouped_ats A\n                              LEFT JOIN committed_hours B\n                              ON (A.half_hour_interval = B.half_hour_interval AND A.lob = B.lob)\n                            ), ats_overages as (\n                              SELECT ac.half_hour_interval, ac.lob, ac.occupancy, ac.ats_hours, ac.committed_hours,\n                                CASE WHEN ao.approved_overage = 1 THEN 1 ELSE (CASE WHEN ac.occupancy >= 0.85 THEN 1 ELSE 0 END) END as approved_overage\n                              FROM ats_commits ac\n                              LEFT JOIN approved_overages ao\n                              ON (ac.half_hour_interval = ao.half_hour_interval AND ao.line_business = ac.lob)\n                            ), temp_final_calculation as (\n                              SELECT A.half_hour_interval, A.lob, A.occupancy, A.ats_hours, A.committed_hours, A.approved_overage,\n                                CASE WHEN A.approved_overage=1 THEN A.ats_hours ELSE (CASE WHEN A.ats_hours*1.05 > A.committed_hours THEN A.committed_hours*1.05 ELSE A.ats_hours END) END as billable_production_hours\n                              FROM ats_overages A\n                            ), final_calculation as (\n                              SELECT half_hour_interval, lob, occupancy, ats_hours, committed_hours, approved_overage, billable_production_hours,\n                                CASE WHEN ats_hours - billable_production_hours < 0 THEN 0 ELSE ats_hours - billable_production_hours END as overage_hours\n                              FROM temp_final_calculation\n                            ), lob_billable_commits as (\n                              SELECT lob, cast(half_hour_interval as date) as date, sum(billable_production_hours) as billable_production_hours, sum(ats_hours) as accrued_hours\n                              FROM final_calculation\n                              GROUP BY lob, cast(half_hour_interval as date)\n                            ), lob_pct as (\n                              SELECT lob, date, COALESCE(billable_production_hours/NULLIF(accrued_hours,0),0) as pct_billable\n                              FROM lob_billable_commits\n                            )\n                            SELECT A.date, A.lob, A.location, A.ats_hours, B.pct_billable, A.ats_hours*B.pct_billable as billable_hours\n                            FROM loc_ats A\n                            JOIN lob_pct B\n                            ON A.date = B.date and A.lob=B.lob\n                            ", "tables": ["mobile_ats", "date_dimension", "billable_lines_business", "committed_hours", "approved_overages"]}}}, "billable_hours_optimum": {"ApplyQuery": {"path": "factory.transform.Queries", "parameters": {"query": "\n                            WITH loc_ats as (\n                              SELECT A.date, B.lob, A.location, sum(A.ats_hours) as ats_hours\n                              FROM (\n                                SELECT gsa.date, gsa.half_hour_interval, gsa.organization, gsa.location, gsa.department, gsa.skill, gsa.language,\n                                  ((gsa.occupancy_pct/100.0) * (gsa.active_sec - gsa.not_ready_sec)) as occupied_sec,\n                                  gsa.ats as ats_hours,\n                                  (gsa.active_sec - gsa.not_ready_sec) as productive_sec,\n                                  dd.month_starting\n                                FROM optimum_ats gsa\n                                LEFT JOIN date_dimension dd ON dd.db_date = gsa.date) AS A\n                                JOIN billable_lines_business B\n                                ON (A.month_starting = B.month_starting\n                                  AND A.organization = B.organization\n                                  AND A.location = B.location\n                                  AND A.department = B.department\n                                  AND A.skill = B.skill\n                                  AND A.language = B.language)\n                              GROUP BY A.date, B.lob, A.location\n                            ), ats_date as (\n                              SELECT gsa.date, gsa.half_hour_interval, gsa.organization, gsa.location, gsa.department, gsa.skill, gsa.language,\n                                ((gsa.occupancy_pct/100.0) * (gsa.active_sec - gsa.not_ready_sec)) as occupied_sec,\n                                 gsa.ats as ats_hours,\n                                 (gsa.active_sec - gsa.not_ready_sec) as productive_sec,\n                                 dd.month_starting\n                              FROM optimum_ats gsa\n                              LEFT JOIN date_dimension dd ON dd.db_date = gsa.date\n                            ), ats_lob as (\n                              SELECT ad.date, ad.month_starting, ad.half_hour_interval, ad.organization, ad.location, ad.department, ad.skill, ad.language,\n                                ad.occupied_sec, ad.ats_hours, ad.productive_sec, lb.lob\n                              FROM ats_date ad\n                              JOIN billable_lines_business lb\n                              ON (ad.month_starting = lb.month_starting\n                                AND ad.organization = lb.organization\n                                AND ad.location = lb.location\n                                AND ad.department = lb.department\n                                AND ad.skill = lb.skill\n                                AND ad.language = lb.language)\n                            ), temp_grouped_ats as (\n                              SELECT A.half_hour_interval, A.month_starting, A.lob,\n                                COALESCE(SUM(occupied_sec) / NULLIF(SUM(productive_sec),0), 0) as occupancy,\n                                SUM(A.ats_hours) as ats_hours\n                              FROM ats_lob AS A\n                              GROUP BY A.half_hour_interval, A.month_starting, A.lob\n                            ), ats_commits as (\n                              SELECT A.half_hour_interval, A.lob, A.occupancy, A.ats_hours, B.committed_hours\n                              FROM temp_grouped_ats A\n                              LEFT JOIN committed_hours B\n                              ON (A.half_hour_interval = B.half_hour_interval AND A.lob = B.lob)\n                            ), ats_overages as (\n                              SELECT ac.half_hour_interval, ac.lob, ac.occupancy, ac.ats_hours, ac.committed_hours,\n                                CASE WHEN ao.approved_overage = 1 THEN 1 ELSE (CASE WHEN ac.occupancy >= 0.85 THEN 1 ELSE 0 END) END as approved_overage\n                              FROM ats_commits ac\n                              LEFT JOIN approved_overages ao\n                              ON (ac.half_hour_interval = ao.half_hour_interval AND ao.line_business = ac.lob)\n                            ), temp_final_calculation as (\n                              SELECT A.half_hour_interval, A.lob, A.occupancy, A.ats_hours, A.committed_hours, A.approved_overage,\n                                CASE WHEN A.approved_overage=1 THEN A.ats_hours ELSE (CASE WHEN A.ats_hours*1.05 > A.committed_hours THEN A.committed_hours*1.05 ELSE A.ats_hours END) END as billable_production_hours\n                              FROM ats_overages A\n                            ), final_calculation as (\n                              SELECT half_hour_interval, lob, occupancy, ats_hours, committed_hours, approved_overage, billable_production_hours,\n                                CASE WHEN ats_hours - billable_production_hours < 0 THEN 0 ELSE ats_hours - billable_production_hours END as overage_hours\n                              FROM temp_final_calculation\n                            ), lob_billable_commits as (\n                              SELECT lob, cast(half_hour_interval as date) as date, sum(billable_production_hours) as billable_production_hours, sum(ats_hours) as accrued_hours\n                              FROM final_calculation\n                              GROUP BY lob, cast(half_hour_interval as date)\n                            ), lob_pct as (\n                              SELECT lob, date, COALESCE(billable_production_hours/NULLIF(accrued_hours,0),0) as pct_billable\n                              FROM lob_billable_commits\n                            )\n                            SELECT A.date, A.lob, A.location, A.ats_hours, B.pct_billable, A.ats_hours*B.pct_billable as billable_hours\n                            FROM loc_ats A\n                            JOIN lob_pct B\n                            ON A.date = B.date and A.lob=B.lob\n                        ", "tables": ["optimum_ats", "date_dimension", "billable_lines_business", "committed_hours", "approved_overages"]}}}, "billable_hours_suddenlink": {"ApplyQuery": {"path": "factory.transform.Queries", "parameters": {"query": "\n                            WITH loc_ats as (\n                              SELECT A.date, B.lob, A.location, sum(A.ats_hours) as ats_hours\n                              FROM (\n                                SELECT gsa.date, gsa.half_hour_interval, gsa.organization, gsa.location, gsa.department, gsa.skill, gsa.language,\n                                  ((gsa.occupancy_pct/100.0) * (gsa.active_sec - gsa.not_ready_sec)) as occupied_sec,\n                                  gsa.ats as ats_hours,\n                                  (gsa.active_sec - gsa.not_ready_sec) as productive_sec,\n                                  dd.month_starting\n                                FROM suddenlink_ats gsa\n                                LEFT JOIN date_dimension dd ON dd.db_date = gsa.date) AS A\n                                JOIN billable_lines_business B\n                                ON (A.month_starting = B.month_starting\n                                  AND A.organization = B.organization\n                                  AND A.location = B.location\n                                  AND A.department = B.department\n                                  AND A.skill = B.skill\n                                  AND A.language = B.language)\n                              GROUP BY A.date, B.lob, A.location\n                            ), ats_date as (\n                              SELECT gsa.date, gsa.half_hour_interval, gsa.organization, gsa.location, gsa.department, gsa.skill, gsa.language,\n                                ((gsa.occupancy_pct/100.0) * (gsa.active_sec - gsa.not_ready_sec)) as occupied_sec,\n                                 gsa.ats as ats_hours,\n                                 (gsa.active_sec - gsa.not_ready_sec) as productive_sec,\n                                 dd.month_starting\n                              FROM suddenlink_ats gsa\n                              LEFT JOIN date_dimension dd ON dd.db_date = gsa.date\n                            ), ats_lob as (\n                              SELECT ad.date, ad.month_starting, ad.half_hour_interval, ad.organization, ad.location, ad.department, ad.skill, ad.language,\n                                ad.occupied_sec, ad.ats_hours, ad.productive_sec, lb.lob\n                              FROM ats_date ad\n                              JOIN billable_lines_business lb\n                              ON (ad.month_starting = lb.month_starting\n                                AND ad.organization = lb.organization\n                                AND ad.location = lb.location\n                                AND ad.department = lb.department\n                                AND ad.skill = lb.skill\n                                AND ad.language = lb.language)\n                            ), temp_grouped_ats as (\n                              SELECT A.half_hour_interval, A.month_starting, A.lob,\n                                COALESCE(SUM(occupied_sec) / NULLIF(SUM(productive_sec),0), 0) as occupancy,\n                                SUM(A.ats_hours) as ats_hours\n                              FROM ats_lob AS A\n                              GROUP BY A.half_hour_interval, A.month_starting, A.lob\n                            ), ats_commits as (\n                              SELECT A.half_hour_interval, A.lob, A.occupancy, A.ats_hours, B.committed_hours\n                              FROM temp_grouped_ats A\n                              LEFT JOIN committed_hours B\n                              ON (A.half_hour_interval = B.half_hour_interval AND A.lob = B.lob)\n                            ), ats_overages as (\n                              SELECT ac.half_hour_interval, ac.lob, ac.occupancy, ac.ats_hours, ac.committed_hours,\n                                CASE WHEN ao.approved_overage = 1 THEN 1 ELSE (CASE WHEN ac.occupancy >= 0.85 THEN 1 ELSE 0 END) END as approved_overage\n                              FROM ats_commits ac\n                              LEFT JOIN approved_overages ao\n                              ON (ac.half_hour_interval = ao.half_hour_interval AND ao.line_business = ac.lob)\n                            ), temp_final_calculation as (\n                              SELECT A.half_hour_interval, A.lob, A.occupancy, A.ats_hours, A.committed_hours, A.approved_overage,\n                                CASE WHEN A.approved_overage=1 THEN A.ats_hours ELSE (CASE WHEN A.ats_hours*1.05 > A.committed_hours THEN A.committed_hours*1.05 ELSE A.ats_hours END) END as billable_production_hours\n                              FROM ats_overages A\n                            ), final_calculation as (\n                              SELECT half_hour_interval, lob, occupancy, ats_hours, committed_hours, approved_overage, billable_production_hours,\n                                CASE WHEN ats_hours - billable_production_hours < 0 THEN 0 ELSE ats_hours - billable_production_hours END as overage_hours\n                              FROM temp_final_calculation\n                            ), lob_billable_commits as (\n                              SELECT lob, cast(half_hour_interval as date) as date, sum(billable_production_hours) as billable_production_hours, sum(ats_hours) as accrued_hours\n                              FROM final_calculation\n                              GROUP BY lob, cast(half_hour_interval as date)\n                            ), lob_pct as (\n                              SELECT lob, date, COALESCE(billable_production_hours/NULLIF(accrued_hours,0),0) as pct_billable\n                              FROM lob_billable_commits\n                            )\n                            SELECT A.date, A.lob, A.location, A.ats_hours, B.pct_billable, A.ats_hours*B.pct_billable as billable_hours\n                            FROM loc_ats A\n                            JOIN lob_pct B\n                            ON A.date = B.date and A.lob=B.lob\n                        ", "tables": ["suddenlink_ats", "date_dimension", "billable_lines_business", "committed_hours", "approved_overages"]}}}, "test": {"ApplyQuery": {"path": "factory.transform.Queries", "parameters": {"query": "SELECT * FROM suddenlink_ats", "tables": ["suddenlink_ats"]}}}, "training_billable_hours": {"ApplyQuery": {"path": "factory.transform.Queries", "parameters": {"query": "\n                            WITH tmp_mobile AS (\n                            SELECT B.month_starting,\n                                 A.location,\n                                 'MBL' AS line_business,\n                                 SUM(A.not_ready_reason_duration)/3600.0 AS hours\n                              FROM mobile_nrrc as a\n                              LEFT JOIN date_dimension AS B ON A.date = B.db_date\n                              WHERE A.not_ready_reason_code = 'Training = 139'\n                              GROUP BY A.location, B.month_starting\n                              ),\n                               tmp_optimum AS (\n                              SELECT B.month_starting,\n                                 A.location,\n                                 'OPT_EAST' AS line_business,\n                                 SUM(A.not_ready_reason_duration)/3600.0 AS hours\n                              FROM optimum_nrrc as a\n                              LEFT JOIN date_dimension AS B ON A.date = B.db_date\n                              WHERE A.not_ready_reason_code = 'Training = 139'\n                              GROUP BY A.location, B.month_starting),\n                               tmp_suddenlink AS (\n                              SELECT B.month_starting,\n                                     A.location,\n                                     'OPT_WEST' AS line_business,\n                                     SUM(A.not_ready_reason_duration)/3600.0 AS hours\n                              FROM suddenlink_nrrc as a\n                              LEFT JOIN date_dimension AS B ON A.date = B.db_date\n                              WHERE A.not_ready_reason_code = 'Training = 139' AND A.location <> 'TYL'\n                              GROUP BY A.location, B.month_starting),\n                              concat_training AS (\n                                  SELECT * FROM tmp_mobile\n                                  UNION ALL\n                                  SELECT * FROM tmp_optimum\n                                  UNION ALL\n                                  SELECT * FROM tmp_suddenlink\n                              ), training_rates AS (\n                                  SELECT date, rate\n                                  FROM rates\n                                  WHERE rate_code_lob = 'CLASSROOM TRAINING'\n                              ) SELECT A.*, B.rate, A.hours * B.rate AS production_revenue\n                              FROM concat_training A\n                              LEFT JOIN rates B\n                              ON A.month_starting = B.date\n                        ", "tables": ["mobile_nrrc", "date_dimension", "optimum_nrrc", "suddenlink_nrrc", "rates"]}}}, "production_revenue": {"ApplyQuery": {"path": "factory.transform.Queries", "parameters": {"query": "\n                            WITH concat_ats AS (\n                                SELECT *, billable_hours*0.0625 as break_hours, billable_hours*0.015 as coaching_hours, billable_hours*1.0775 as total_billable_hours\n                                FROM billable_hours_suddenlink\n                                UNION ALL\n                                SELECT *, billable_hours*0.0625 as break_hours, billable_hours*0.015 as coaching_hours, billable_hours*1.0775 as total_billable_hours\n                                FROM billable_hours_optimum\n                                UNION ALL\n                                SELECT *, billable_hours*0.0625 as break_hours, billable_hours*0.015 as coaching_hours, billable_hours*1.0775 as total_billable_hours\n                                FROM billable_hours_mobile\n                            ), production_rates AS (\n                                SELECT date, rate\n                                FROM rates\n                                WHERE rate_code_lob = 'PRODUCTION RATE'\n                            ) SELECT A.*, B.rate, A.total_billable_hours * B.rate AS production_revenue\n                            FROM concat_ats A\n                            LEFT JOIN rates B\n                            ON A.date = B.date\n                        ", "tables": ["billable_hours_suddenlink", "billable_hours_optimum", "billable_hours_mobile", "rates"]}}}}, "Load": {"Raw": {"EmployeeScheduleSales": "path1_1", "EmployeeScheduleRepair": "path2_1"}, "Stage": {"EmployeeScheduleSales": "path1_2", "EmployeeScheduleRepair": "path2_2"}}}}