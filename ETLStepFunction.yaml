Transform: AWS::Serverless-2016-10-31

Description: "Roles for ETL project"

Parameters:
  RetrieveItemsFunction:
    Type: String

  StartETLFunction:
    Type: String

  StartCrawlerFunction:
    Type: String
  
  CrawlerStatusCheckFunction:
    Type: String

Resources:

  MyStepFunction:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        TracingConfiguration:
          Enabled: true
        RoleArn: !GetAtt StepFunctionRole.Arn
        DefinitionString: !Sub |
          {
            "Comment": "A HELLO World example of the Amazon States Language using Pass states...",
            "StartAt": "Process Clients",
            "States": {
              "Process Clients": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${RetrieveItemsFunction}",
                "ResultPath": "$.clientList",
                "Next": "Parallel Processing"
              },
              "Parallel Processing": {
                "Type": "Map",
                "ItemsPath": "$.clientList.clientList",
                "ResultPath": "$.parallelResults",
                "MaxConcurrency": 10,
                "Iterator": {
                    "StartAt": "Start ETL Job",
                    "States": {
                        "Start ETL Job": {
                          "Type": "Task",
                          "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StartETLFunction}",
                          "Next": "ETL Job Success?",
                          "ResultPath": "$.taskresult",
                          "Catch": [
                            {
                              "ErrorEquals": [
                                "States.ALL"
                              ],
                              "ResultPath": "$.error",
                              "Next": "Handle Failure"
                            }
                          ]
                        },
                        "ETL Job Success?": {
                          "Type": "Choice",
                          "Choices": [
                            {
                              "Variable": "$.taskresult.Validation",
                              "StringEquals": "SUCCESS",
                              "Next": "Start Crawler For File"
                            },
                            {
                              "Variable": "$.taskresult.Validation",
                              "StringEquals": "FAILURE",
                              "Next": "Handle Failure"
                            }
                          ]
                        },
                        "Handle Failure": {
                          "Type": "Pass",
                          "Parameters": {
                            "StateMachineName.$": "$$.StateMachine.Name",
                            "ExecutionName.$": "$$.Execution.Name",
                            "ExecutionTime.$": "$$.Execution.StartTime",
                            "ErrorMessage": "An error ocurred in the ETL Job",
                            "FailedTaskName.$": "$$.State.Name"
                          },
                          "ResultPath": "$.taskresult",
                          "Next": "Error Notification"
                        },
                        "Error Notification": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::aws-sdk:sns:publish",
                          "Parameters": {
                            "Message.$": "States.Format('Error: {}, StateMachine:{}, Name: {}, Time: {}, Task: {}', $.taskresult.ErrorMessage, $.taskresult.StateMachineName, $.taskresult.ExecutionName, $.taskresult.ExecutionTime ,$.taskresult.FailedTaskName)",
                            "TopicArn": "${SNSTopic}"
                          },
                          "Next": "Fail"
                        },
                        "Start Crawler For File": {
                          "Type": "Task",
                          "ResultPath": "$.taskresult",
                          "ResultSelector": {
                            "cnt": "0",
                            "crawler_name": "${CrawlPartitionedFile}"
                          },
                          "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StartCrawlerFunction}",
                          "Parameters": {
                            "Crawler_Name": "${CrawlPartitionedFile}"
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "CrawlerRunningException"
                              ],
                              "IntervalSeconds": 10,
                              "MaxAttempts": 10,
                              "BackoffRate": 2
                            }
                          ],
                          "Catch": [
                            {
                              "ErrorEquals": [
                                "CrawlerRunningException"
                              ],
                              "Comment": "Crawler is running for long time",
                              "Next": "Handle Failure"
                            },
                            {
                              "ErrorEquals": [
                                "States.ALL"
                              ],
                              "Comment": "Error fall back",
                              "ResultPath": "$.error-info",
                              "Next": "Handle Failure"
                            }
                          ],
                          "Next": "Crawler Status Check"
                        },
                        "Crawler Status Check": {
                          "Type": "Task",
                          "InputPath": "$.taskresult",
                          "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CrawlerStatusCheckFunction}",
                          "Next": "File Crawler Finished?",
                          "ResultPath": "$.taskresult"
                        },
                        "File Crawler Finished?": {
                          "Type": "Choice",
                          "Choices": [
                            {
                              "Or": [
                                {
                                  "Variable": "$.taskresult.Status",
                                  "StringEquals": "STOPPING"
                                },
                                {
                                  "Variable": "$.taskresult.Status",
                                  "StringEquals": "RUNNING"
                                }
                              ],
                              "Next": "Raw File Crawler Wait"
                            },
                            {
                              "Variable": "$.taskresult.Status",
                              "StringEquals": "READY",
                              "Next": "Handle Success"
                            },
                            {
                              "Variable": "$.taskresult.Status",
                              "StringEquals": "RETRYLIMITREACH",
                              "Next": "Handle Failure"
                            },
                            {
                              "Variable": "$.taskresult.Status",
                              "StringEquals": "FAILED",
                              "Next": "Handle Failure"
                            }
                          ],
                          "Default": "Handle Failure"
                        },
                        "Raw File Crawler Wait": {
                          "Type": "Wait",
                          "Seconds": 30,
                          "Next": "Crawler Status Check"
                        },
                        "Fail": {
                          "Type": "Fail",
                          "Cause": "validation failed",
                          "Error": "ValidationError"
                        },
                        "Handle Success": {
                          "Type": "Pass",
                          "Parameters": {
                            "StateMachineName.$": "$$.StateMachine.Name",
                            "ExecutionName.$": "$$.Execution.Name",
                            "ExecutionTime.$": "$$.Execution.StartTime"
                          },
                          "ResultPath": "$.taskresult",
                          "Next": "Success Notification"
                        },
                        "Success Notification": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::aws-sdk:sns:publish",
                            "Parameters": {
                              "Message.$": "States.Format('Successful task. StateMachine: {}, Name: {}, Time: {}', $.taskresult.StateMachineName, $.taskresult.ExecutionName, $.taskresult.ExecutionTime)",
                              "TopicArn": "${SNSTopic}"
                            },
                            "End": true
                        }
                      }
                    },
                    "End": true
                  }
                }
              }

Outputs:
  MyStepFunction:
    Value: !Ref MyStepFunction
    Export:
      Name: MyStepFunction